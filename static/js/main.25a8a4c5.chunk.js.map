{"version":3,"sources":["Snake.js","snake_storage.js","food.js","playAreaControl.js","playArea.js","App.js","serviceWorker.js","index.js"],"names":["Snake","isEyes","direction","top","left","snakeVar","classForSnake","className","style","SnakeStorage","snakeBodyPositions","snakes","i","length","push","key","id","Food","foodVar","PlayAreaControler","score","restart","hideButton","onClick","PlayArea","props","useState","setScore","setDirection","actualDirection","setActualDirection","setSnakeBodyPositions","Math","ceil","random","food","setFood","setHideButton","buttonTick","setButtonTick","useInterval","pop","snakeTop","snakeLeft","foodTop","foodLeft","unshift","alert","otherTop","otherLeft","copyOfSnake","head","shift","isSnakeColiding","handleKeys","onKeyEvent","e","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25a8a4c5.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Snake.css\"\n\nfunction Snake({isEyes, direction, top, left}) { \n    var snakeVar = {left: `${left}px`, top: `${top}px`};\n    var classForSnake = \"snake \" + (isEyes ? direction : \"\");\n    return(<div className = {classForSnake}  style = {snakeVar}>\n            {isEyes && <div className = \"theActualEye leftEye\" ></div> }\n            {isEyes && <div className = \"theActualEye rightEye\"></div> }\n        </div>)\n}\n\nexport default Snake;\n","import React from 'react';\nimport Snake from './Snake.js';\n// eslint-disable-next-line\nimport {useEffect} from 'react';\n\n\nfunction SnakeStorage ({snakeBodyPositions, direction}) {\n\n    var snakes = [];\n    for (var i=1; i<snakeBodyPositions.length; i++) {\n      snakes.push(<Snake key={i} top={snakeBodyPositions[i].top} left={snakeBodyPositions[i].left}/>)\n    }\n\n    return(\n        <div id=\"snakeContainer\">\n          <Snake isEyes = \"true\" direction={direction} key={0} top={snakeBodyPositions[0].top} left={snakeBodyPositions[0].left}/>\n        {snakes}\n\n      </div>\n    );\n}\n\n\n\n\nexport default SnakeStorage;","import React from 'react'; \r\nimport './food.css';\r\n\r\nfunction Food ({top, left}) {\r\n    var foodVar = {left: `${left}px`, top: `${top}px`};\r\n    return(\r\n        <div className = 'food' style = {foodVar}>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Food","import React from 'react';\r\n\r\nfunction PlayAreaControler ({score, restart, hideButton}) {\r\n    return( \r\n        \r\n        <div id=\"playAreaControlerDiv\" >\r\n        {hideButton && <button className='playAreaControler' onClick={restart}>RESTART</button>}\r\n        <h1>{score}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\n   \r\nexport default PlayAreaControler","import React, { useState } from 'react';\nimport SnakeStorage from './snake_storage.js' \nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport useInterval from '@use-it/interval';\nimport Food from './food.js'\nimport PlayAreaControler from './playAreaControl.js'\n\n\nfunction PlayArea (props) {\n    const [score, setScore] = useState(4)\n    const [direction, setDirection] = useState('right');\n    const [actualDirection, setActualDirection] = useState('right')\n    const [snakeBodyPositions, setSnakeBodyPositions] = useState([{left:59*3, top:1}, {left:59*2, top:1}, {left:59*1, top:1}, {left:1, top:1}])\n    const [food, setFood] = useState({top: Math.ceil(Math.random() * 12 ), left: Math.ceil(Math.random() * 22 )})\n    const [hideButton, setHideButton] = useState(false)\n    const [buttonTick, setButtonTick] = useState(0)\n    // The diffreencr is in intervals of 9 beacuse there is 8px around and 1 bonous one on the side of the play area.\n\n    function isCollide(snakeTop, snakeLeft, foodTop, foodLeft) {\n        return !(\n            ((snakeTop + 58) < (foodTop)) ||\n            (snakeTop > (foodTop + 50)) ||\n            ((snakeLeft + 58) < foodLeft) ||\n            (snakeLeft > (foodLeft + 50))\n        );\n    }\n\n    function isCollideWithSnakeBody(top, left, otherTop, otherLeft) {\n        return !(\n            ((top) < (otherTop)) ||\n            (top > (otherTop)) ||\n            ((left) < otherLeft) ||\n            (left > (otherLeft))\n        );\n    }\n    // The hight and with of the snake (including borders) is 58px.\n    // The apple is 50px x 50px and with no \n    \n    function restart(){\n        setScore(4);\n        setDirection('right');\n        setActualDirection('right');\n        setSnakeBodyPositions([{left:59*3, top:1}, {left:59*2, top:1}, {left:59*1, top:1}, {left:1, top:1}]);\n        setFood({top: Math.ceil(Math.random() * 12 ), left: Math.ceil(Math.random() * 22 )});\n        setHideButton(false)\n        setButtonTick(0)\n        \n    }\n\n    function isSnakeColiding() {\n        const copyOfSnake = [...snakeBodyPositions];\n        const head = [...snakeBodyPositions].shift();\n        for(var i = 1; i<copyOfSnake.length-1; i+=1){\n            if(isCollideWithSnakeBody(copyOfSnake[i].top, copyOfSnake[i].left, head.top, head.left)) {\n                return(true)\n            }\n        }\n        return(false)\n    }\n\n    useInterval (() => {\n        snakeBodyPositions.pop();\n        var left = snakeBodyPositions[0].left;\n        var top = snakeBodyPositions[0].top;\n        setActualDirection(direction)\n        if (direction === 'right') {\n            left += 58;\n        } else if (direction === 'left') {\n            left -= 58;\n        } else if (direction === \"up\") {\n            top -= 58;\n        } else if (direction === 'down') {\n            top += 58;\n        } \n\n\n        if (isCollide(top, left, food.top*58+5, food.left*58+7)) {\n            setFood({top: Math.ceil(Math.random() * 12 ), left: Math.ceil(Math.random() * 22 )})\n            snakeBodyPositions.push({left:snakeBodyPositions[snakeBodyPositions.length-1].left, top: snakeBodyPositions[snakeBodyPositions.length-1].top    })\n            setScore(score + 1);\n        }\n\n        if (buttonTick > 3) {\n            setHideButton(true)\n        }\n\n        snakeBodyPositions.unshift({left, top});\n        setSnakeBodyPositions([...snakeBodyPositions]);\n        setButtonTick(buttonTick + 1)\n\n        if (top < 1 || top > 12 * 59 || left < 1 || left > 22 * 59) {\n            alert(\"you lost by hitting the wall, your score was \" + score)\n            restart()\n        }\n\n        if(isSnakeColiding()) {\n            alert(\"you lost by going onto your self, your score was \" + score)\n            restart()\n        }\n\n    }, 250);\n    return (\n        <div id='playAreaContainer'>\n            <PlayAreaControler score={score} restart={restart} hideButton={hideButton}/>\n            <div id = \"playArea\">\n                <KeyboardEventHandler\n                handleKeys={['left', 'right', 'up', 'down']}\n                onKeyEvent={(key, e) => setDirection(key)} />\n                <SnakeStorage snakeBodyPositions={snakeBodyPositions} direction={actualDirection}/>\n                <Food top={58*food.top + 5} left={58*food.left + 7}/>\n            </div>\n        </div>\n    \n    )\n}\n\nexport default PlayArea;\n","import React from 'react';\nimport './App.css';\n// import {useEffect, useState} from 'react'\nimport PlayArea from './playArea';\n\n\nfunction App() {\n//   useEffect(() => {\n//     console.log('HTML LOADED');\n//     setInterval (function(){\n//     setForward(forward + 1) \n//     }, 1000)\n//     document.addEventListener(\"keydown\", keyDownTextField, false);\n//     function keyDownTextField(e) {\n//     var keyCode = e.keyCode;\n//     if(keyCode === 37) {\n//     alert(\"You hit the left arrow key.\");\n//      } else if (keyCode === 39) {\n//     alert(\"You hit the right arrow key\");\n// }\n// }\n//   });\n// useEffect(() => {\n//   const interval = setInterval(() => {\n//     setForward(forward + 1);\n//   }, 1000);\n//   return () => clearInterval(interval);\n// }, [forward]);\n  return (\n    <div>\n      <PlayArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}